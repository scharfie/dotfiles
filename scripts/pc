#!/usr/bin/env ruby
# encoding: ascii
require 'logger'
require 'socket'
require 'timeout'
require 'open-uri'
require 'net/http'

module PC
  MAC_ADDRESS = '10:C3:7B:6E:8A:A4' unless const_defined?(:MAC_ADDRESS)
  IP          = '192.168.254.40'    unless const_defined?(:IP)

  class Service
    # requires SleepOnLan utility to be running
    def sleep(*args)
      sleep_on_lan('suspend')
    end

    def shutdown(*args)
      sleep_on_lan('poweroff')
    end

    def sleep_on_lan(action)
      begin
        result = Net::HTTP.get_response(URI("http://#{PC::IP}:7760/#{action}"))

      rescue Net::HTTPBadResponse
        message = $!.message.gsub(/wrong status line: /, '').gsub('<BR>', '')
        puts "Server says: #{message}"
      end
    end

    def is_port_open?(ip, port)
      begin
        Timeout::timeout(1) do
          begin
            s = TCPSocket.new(ip, port)
            s.close
            return true
          rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
            return false
          end
        end
      rescue Timeout::Error
      end

      return false
    end

    def ping(*args)
      if is_port_open?(IP, 7760)
        puts "Success!  PC appears to be awake"
      else
        puts "Offline"
      end
    end

    def wake(*args)
      begin
        preamble = "\xFF\xFF\xFF\xFF\xFF\xFF"
        mac  = PC::MAC_ADDRESS
        data = preamble + (
          mac.split(':').map { |e| e.hex.chr }.join * 16
        )

        puts("Wake-On-Lan packet sent to MAC address " + mac)

        socket = UDPSocket.new
        socket.setsockopt(Socket::SOL_SOCKET, Socket::SO_BROADCAST, true)
        socket.send(data, 0, '<broadcast>', 9)
      end
    end
  end

  def self.invoke!(command, arguments)
    service = PC::Service.new

    valid_commands = %w(sleep wake ping shutdown)

    case command
    when *valid_commands
      service.send(command)
    else
      puts "Unknown command: #{command} #{arguments.inspect}"
    end
  end
end

PC.invoke!(ARGV.shift, ARGV.dup)
