if [[ -n $SSH_CONNECTION ]]; then
  export PS1='%{$fg[red]%}[@%m] %{$fg_bold[green]%}%3~%{$fg_bold[black]%}#%{${reset_color}%} '
else
  export PS1='%{$fg_bold[green]%}%3~%{$fg_bold[black]%}#%{${reset_color}%} '
fi

# disabling this in favor of powerline-zsh
# export RPS1='%{$fg_bold[black]%}[ %{$fg_bold[blue]%}$(git_info_for_prompt "%s")%{$fg_bold[black]%} ]%{${reset_color}%}'

export NODE_PATH=./app/assets/javascripts:/usr/local/lib/node_modules

export EDITOR='vim'
# export PATH="./bin:/home/chris/.rbenv/bin:/home/chris/pear/bin:/opt/local/apache2/bin:/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:/usr/local/git/bin:$PATH"
export PATH="./bin:/Users/cscharf/dotfiles/scripts:/home/chris/pear/bin:/Users/cscharf/pear/bin:/opt/local/apache2/bin:/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:/usr/local/git/bin:$PATH"
export MANPATH="/usr/local/man:/usr/local/mysql/man:/usr/local/git/man:$MANPATH"
# export JRUBY_HOME="/opt/local/share/java/jruby"

# try to suppress jruby dock icons
export JRUBY_OPTS="--headless -Xcompile.invokedynamic=false -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify -Xcompile.mode=OFF"

export DYLD_LIBRARY_PATH=/opt/oracle/instantclient_11_2:$DYLD_LIBRARY_PATH

fpath=(~/.zsh/functions $fpath)

autoload -U ~/.zsh/functions/*(:t)
autoload -U colors
colors

export TERM=xterm-256color
export RUBYOPT=rubygems
export RUBYLIB=test
export REPORTTIME=5

HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=1000

# rbenv stuff
export RBENV_BUILD_ROOT=~/.rbenv/sources
export RBENV_ROOT=~/.rbenv
export CONFIGURE_OPTS="optflags='-O0' debugflags='-ggdb'"

# for oracle db connections
export NLS_LANG=AMERICAN_AMERICA.UTF8

export PASSWORD_STORE_DIR=~/.password-store/

setopt NO_BG_NICE # don't nice background tasks
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS # allow functions to have local options
setopt LOCAL_TRAPS # allow functions to have local traps
setopt HIST_VERIFY
setopt SHARE_HISTORY # share history between sessions ???
setopt EXTENDED_HISTORY # add timestamps to history
setopt PROMPT_SUBST
setopt CORRECT
setopt COMPLETE_IN_WORD
setopt IGNORE_EOF

setopt APPEND_HISTORY # adds history
setopt INC_APPEND_HISTORY SHARE_HISTORY  # adds history incrementally and share it across sessions
setopt HIST_IGNORE_ALL_DUPS  # don't record dupes in history
setopt HIST_REDUCE_BLANKS

# zle -N newtab

# bindkey '^[^[[D' backward-word
# bindkey '^[^[[C' forward-word
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line
# bindkey '^h' delete-char
# bindkey '^[^N' newtab
# bindkey '^?' backward-delete-char 

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
# export RBENV_ROOT=/usr/local/opt/rbenv
# export RPS1='%{$fg_bold[black]%}[ %{$fg_bold[blue]%}$(git_info_for_prompt "%s")%{$fg_bold[black]%} ]%{${reset_color}%}'

# edit vs insert mode (vim)
#export VI_INSERTMODE=""
#export VI_COMMANDMODE="%{$fg_bold[green]%}COMMAND%{${reset_color}%}"
#
#function zle-line-init zle-keymap-select {
    #RPS1="${${KEYMAP/vicmd/$VI_COMMANDMODE}/(main|viins)/$VI_INSERTMODE}"
    #RPS2=$RPS1
    #zle reset-prompt
#}
#zle -N zle-line-init
#zle -N zle-keymap-select


# $1 = type; 0 - both, 1 - tab, 2 - title
# rest = text
setTerminalText () {
    # echo works in bash & zsh
    local mode=$1 ; shift
    echo -ne "\033]$mode;$@\007"
}
stt_both  () { setTerminalText 0 $@; }
stt_tab   () { setTerminalText 1 $@; }
stt_title () { setTerminalText 2 $@; }

function background_jobs() {
  export RPS1="$(jobs)"
  RPS2=RPS1
}

function set_terminal_to_current_directory() {
  stt_both "${PWD##*/}"
}

fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
    zle redisplay
  else
    zle push-input
    zle clear-screen
  fi
}

zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

autoload -Uz history-beginning-search-menu
zle -N history-beginning-search-menu
bindkey '^X^L' history-beginning-search-menu


precmd_functions+=(background_jobs)
precmd_functions+=(set_terminal_to_current_directory)

# powerline configuration
function powerline_precmd() {
  export PS1="$(~/.zsh/plugins/powerline-shell/powerline-shell.py $? --shell zsh)"
}

function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ -z "$POWERLINE" ]; then
  # install_powerline_precmd
fi

# /powerline

source ~/.shell_prompt.sh
